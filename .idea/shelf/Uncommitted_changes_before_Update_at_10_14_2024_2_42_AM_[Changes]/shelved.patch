Index: src/main/java/ar/edu/utn/frba/dds/controllers/ControladorCargaMasiva.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ar.edu.utn.frba.dds.controllers;\r\n\r\nimport static ar.edu.utn.frba.dds.utils.random.Random.generateRandomString;\r\n\r\nimport ar.edu.utn.frba.dds.domain.adapters.AdapterMail;\r\nimport ar.edu.utn.frba.dds.domain.entities.Contribucion;\r\nimport ar.edu.utn.frba.dds.domain.entities.cargaMasiva.CargaMasivaColaboraciones;\r\nimport ar.edu.utn.frba.dds.domain.entities.contacto.Contacto;\r\nimport ar.edu.utn.frba.dds.domain.entities.documento.Documento;\r\nimport ar.edu.utn.frba.dds.domain.entities.documento.TipoDocumento;\r\nimport ar.edu.utn.frba.dds.domain.entities.donacionesDinero.DonacionDinero;\r\nimport ar.edu.utn.frba.dds.domain.entities.personasHumanas.FormasContribucionHumanas;\r\nimport ar.edu.utn.frba.dds.domain.entities.personasHumanas.PersonaHumana;\r\nimport ar.edu.utn.frba.dds.domain.entities.personasVulnerables.PersonaVulnerable;\r\nimport ar.edu.utn.frba.dds.domain.entities.puntosRecomendados.servicioRecomendacionDonacion.Personas;\r\nimport ar.edu.utn.frba.dds.domain.entities.tarjetas.Tarjeta;\r\nimport ar.edu.utn.frba.dds.domain.entities.usuarios.Rol;\r\nimport ar.edu.utn.frba.dds.domain.entities.usuarios.TipoRol;\r\nimport ar.edu.utn.frba.dds.domain.entities.usuarios.Usuario;\r\nimport ar.edu.utn.frba.dds.domain.entities.viandas.DistribucionVianda;\r\nimport ar.edu.utn.frba.dds.domain.entities.viandas.Vianda;\r\nimport ar.edu.utn.frba.dds.domain.repositories.Repositorio;\r\nimport ar.edu.utn.frba.dds.domain.repositories.imp.RepositorioPersonaHumana;\r\nimport ar.edu.utn.frba.dds.domain.repositories.imp.RepositorioRol;\r\nimport ar.edu.utn.frba.dds.domain.repositories.imp.RepositorioUsuario;\r\nimport ar.edu.utn.frba.dds.exceptions.ValidacionFormularioException;\r\nimport ar.edu.utn.frba.dds.utils.javalin.PrettyProperties;\r\nimport io.github.flbulgarelli.jpa.extras.simple.WithSimplePersistenceUnit;\r\nimport io.javalin.http.Context;\r\nimport io.javalin.http.UploadedFile;\r\nimport io.javalin.util.FileUtil;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.Reader;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Optional;\r\nimport org.apache.commons.csv.CSVFormat;\r\nimport org.apache.commons.csv.CSVParser;\r\nimport org.apache.commons.csv.CSVRecord;\r\nimport org.apache.commons.io.FileUtils;\r\n\r\npublic class ControladorCargaMasiva implements WithSimplePersistenceUnit {\r\n  private final String rutaCargaHbs = \"/admin/adminCargaCSV.hbs\";\r\n  private RepositorioPersonaHumana repositorioPersonaHumana;\r\n  private RepositorioUsuario repositorioUsuario;\r\n  private RepositorioRol repositorioRol;\r\n  private AdapterMail adapterMail;\r\n\r\n  public ControladorCargaMasiva(RepositorioPersonaHumana repositorioPersonaHumana, AdapterMail adapterMail, RepositorioUsuario repositorio, RepositorioRol repositorioRol) {\r\n    this.repositorioPersonaHumana = repositorioPersonaHumana;\r\n    this.adapterMail = adapterMail;\r\n    this.repositorioUsuario = repositorio;\r\n    this.repositorioRol = repositorioRol;\r\n  }\r\n\r\n  public void create(Context context) {\r\n    context.render(rutaCargaHbs);\r\n  }\r\n\r\n  public void save(Context context) {\r\n    UploadedFile archivo = context.uploadedFile(\"files\");\r\n\r\n    try {\r\n      CargaMasivaColaboraciones carga = new CargaMasivaColaboraciones(adapterMail);\r\n      String rutaDestino = carga.obtenerRutaDestino(archivo);\r\n\r\n      Reader reader = new InputStreamReader(new FileInputStream(rutaDestino));\r\n      CSVParser parser = carga.crearParserDeCsv(reader);\r\n\r\n      for (CSVRecord record : parser) {\r\n        Optional<PersonaHumana> posibleHumano = repositorioPersonaHumana.buscarPorDocumento(record.get(1));\r\n        Optional<Rol> rol = repositorioRol.buscarPorTipo(TipoRol.PERSONA_HUMANA);\r\n        Usuario usuario = this.cargarUsuario(record, rol.orElse(null));\r\n\r\n        if (posibleHumano.isEmpty()) {\r\n          PersonaHumana humano = carga.cargarPersonaHumana(record);\r\n          humano.setUsuario(usuario);\r\n\r\n          withTransaction(() -> {\r\n            repositorioUsuario.guardar(usuario);\r\n            repositorioPersonaHumana.guardar(humano);\r\n            persistirContribucion(record, humano);\r\n          });\r\n\r\n          carga.notificarAltaPersona(humano);\r\n          usuario.setClaveEncriptada(usuario.getClave());\r\n          repositorioUsuario.actualizar(usuario);\r\n        } else {\r\n          withTransaction(() -> persistirContribucion(record, posibleHumano.get()));\r\n        }\r\n      }\r\n\r\n      this.persistirCargaMasiva(carga);\r\n      context.render(rutaCargaHbs, Map.of(\"success\", \"La carga masiva se realizó con éxito.\", \"cargando\", false));\r\n    } catch (Exception e) {\r\n      context.render(rutaCargaHbs, Map.of(\"error\", e.getMessage(), \"cargando\", false));\r\n    }\r\n  }\r\n\r\n  private void persistirCargaMasiva(CargaMasivaColaboraciones carga) {\r\n    withTransaction(() -> {\r\n      // TODO: Sacar el ID del usuario de la sesion\r\n      Optional<Usuario> usuario = this.repositorioUsuario.buscarPorId(1L, Usuario.class);\r\n      if (usuario.isEmpty()) {\r\n        throw new ValidacionFormularioException(\"No se ha encontrado al usuario responsable.\");\r\n      }\r\n      carga.setResponsable(usuario.get());\r\n      carga.setFechaRegistro(LocalDateTime.now());\r\n      repositorioRol.guardar(carga);\r\n    });\r\n  }\r\n\r\n  private void persistirContribucion(CSVRecord record, PersonaHumana humano) {\r\n    int cantidad = Integer.parseInt(record.get(7));\r\n    LocalDate fecha = LocalDate.parse(record.get(5), DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));\r\n    switch (FormasContribucionHumanas.valueOf(record.get(6))) {\r\n      case DONACION_DINERO:\r\n        DonacionDinero donacionDinero = new DonacionDinero();\r\n        donacionDinero.setMonto(cantidad);\r\n        donacionDinero.setFecha(fecha);\r\n        donacionDinero.setPersonaHumana(humano);\r\n        repositorioRol.guardar(donacionDinero);\r\n        break;\r\n      case DONACION_VIANDAS:\r\n        for (int i = 0; i < cantidad; i++) {\r\n          Vianda viandaDonada = new Vianda(fecha);\r\n          viandaDonada.setPersonaHumana(humano);\r\n          viandaDonada.setComida(\"Correspondiente a carga masiva\");\r\n          repositorioRol.guardar(viandaDonada);\r\n        }\r\n        break;\r\n      case REDISTRIBUCION_VIANDAS:\r\n        DistribucionVianda distribucion = new DistribucionVianda(fecha, cantidad);\r\n        distribucion.setColaborador(humano);\r\n        distribucion.setTerminada(true);\r\n        distribucion.setMotivo(\"Carga masiva de colaboraciones\");\r\n        // distribucion.setHeladeraDestino();\r\n        // distribucion.setHeladeraOrigen();\r\n        repositorioRol.guardar(distribucion);\r\n        break;\r\n      case ENTREGA_TARJETAS:\r\n        for (int i = 0; i < cantidad; i++) {\r\n          Tarjeta tarjetaRepartida = new Tarjeta();\r\n          tarjetaRepartida.setFechaRecepcionPersonaVulnerable(fecha);\r\n          // como registramos a quien se la dio?\r\n          repositorioRol.guardar(tarjetaRepartida);\r\n        }\r\n        break;\r\n      default:\r\n        throw new ValidacionFormularioException(\"Tipo de contribución no válida: \" + record.get(6));\r\n    }\r\n  }\r\n\r\n  public Usuario cargarUsuario(CSVRecord record, Rol rol) {\r\n    String baseNombre = record.get(2).toLowerCase() + \".\" + record.get(3).toLowerCase();\r\n    String nombreUsuario = baseNombre;\r\n    int contador = 1;\r\n\r\n    while (repositorioUsuario.buscarPorNombre(nombreUsuario).isPresent()) {\r\n      nombreUsuario = baseNombre + contador++;\r\n    }\r\n\r\n    Usuario usuario = new Usuario();\r\n    usuario.setNombre(nombreUsuario);\r\n    usuario.setClave(generateRandomString(12));\r\n    usuario.setRol(rol);\r\n\r\n    return usuario;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ar/edu/utn/frba/dds/controllers/ControladorCargaMasiva.java b/src/main/java/ar/edu/utn/frba/dds/controllers/ControladorCargaMasiva.java
--- a/src/main/java/ar/edu/utn/frba/dds/controllers/ControladorCargaMasiva.java	(revision 0180d48a16003ab22f03ed97566456d71e99dad7)
+++ b/src/main/java/ar/edu/utn/frba/dds/controllers/ControladorCargaMasiva.java	(date 1728884544805)
@@ -25,6 +25,7 @@
 import ar.edu.utn.frba.dds.domain.repositories.imp.RepositorioUsuario;
 import ar.edu.utn.frba.dds.exceptions.ValidacionFormularioException;
 import ar.edu.utn.frba.dds.utils.javalin.PrettyProperties;
+import com.twilio.rest.api.v2010.account.incomingphonenumber.Local;
 import io.github.flbulgarelli.jpa.extras.simple.WithSimplePersistenceUnit;
 import io.javalin.http.Context;
 import io.javalin.http.UploadedFile;
